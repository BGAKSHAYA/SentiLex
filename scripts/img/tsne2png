#!/usr/bin/env python2.7
# -*- coding: utf-8-unix; mode: python; -*-

##################################################################
# Imports
from __future__ import absolute_import, unicode_literals

import argparse
import codecs
import matplotlib.pyplot as plt
import re
import pandas as pd
import seaborn as sns
import sys

##################################################################
# Constants
COMMENT = "###"
ENCODING = "utf-8"
FS = 14
TAB_RE = re.compile(r" *\t+ *")
POSITIVE = "positive"
NEGATIVE = "negative"
NEUTRAL = "neutral"
POL = "polarity"
NEUT_COL = "#000000"
NEUT_MARK = "."
POS_COL = "#8B0000"
POS_MARK = "^"
NEG_COL = "blue"
NEG_MARK = "v"
POLARITIES = (NEUTRAL, NEGATIVE, POSITIVE)
MARKERS = [NEUT_MARK, NEG_MARK, POS_MARK]
POL2SIZE = {POSITIVE: 150, NEGATIVE: 150, NEUTRAL: 10}
PALETTE = {POSITIVE: POS_COL, NEGATIVE: NEG_COL, NEUTRAL: NEUT_COL}
SIZE = "size"


##################################################################
# Methods
def read_file(a_fname, a_func):
    """Read content of a file.

    @param a_fname - input file to be read
    @type a_fname - str
    @param a_func - custom function for processing each line
    @type a_func - lambda

    @return \c void

    """
    with codecs.open(a_fname, 'r', ENCODING) as ifile:
        for iline in ifile:
            iline = iline.strip()
            if not iline or iline.startswith(COMMENT):
                continue
            a_func(TAB_RE.split(iline))


def vec2png(a_w2pol, a_w2vec, a_ofname):
    """Generate a PNG plot for word embeddings.

    @param a_w2pol - mapping from word to polarity
    @type a_w2pol - dict
    @param a_w2vec - mapping from word to vectors
    @type a_w2vec - dict
    @param a_ofname - name of the output file in which to save the plot
    @type a_ofname - str

    """
    # construct pandas dataframe
    data = pd.DataFrame([{POL: a_w2pol.get(w, NEUTRAL),
                          SIZE: POL2SIZE[a_w2pol.get(w, NEUTRAL)],
                          'x': x, 'y': y}
                         for w, (x, y) in a_w2vec.iteritems()])
    data[POL] = pd.Categorical(data[POL], POLARITIES)
    data.sort_values(by=POL, inplace=True, ascending=False, kind="heapsort")
    data.reset_index(drop=True, inplace=True)
    # set up common parameters
    sns.set_context("paper")
    plt.tick_params(axis="both", labelsize=FS - 4)
    # create scatter plot
    scplot = sns.lmplot('x', 'y', data=data,
                        hue=POL,
                        hue_order=POLARITIES,
                        palette=PALETTE,
                        markers=MARKERS,
                        fit_reg=False,
                        sharex=False,
                        sharey=False,
                        legend_out=False,
                        scatter=False
                        )
    scplot.hue_kws['s'] = [4, 128, 128]
    # set plot-specific parameters
    iplot = scplot.axes[0][0]
    iplot.set_xlabel("x", fontsize=FS)
    iplot.set_ylabel("y", fontsize=FS)
    scplot.map(plt.scatter, 'x', 'y')
    legend_data = scplot._legend_data
    labels = []
    handles = []
    ihandle = None
    for pol in reversed(POLARITIES):
        labels.append(pol)
        ihandle = legend_data[pol]
        handles.append(ihandle)
    legend = plt.legend(handles, labels, markerscale=1,
                        title="Terms", fontsize=FS - 3,
                        loc=1, bbox_to_anchor=(1., 1., 0, 0.))
    title = legend.get_title()
    title.set_weight("bold")
    title.set_fontsize(FS - 3)
    sns.plt.show()
    scplot.savefig(a_ofname)


def main(a_args):
    """Main method for visualizing sne embeddings.

    @param a_args - CLI arguments
    @type a_args - list[str]

    """
    argparser = argparse.ArgumentParser(
        description="Represent t-sne embeddings on a 2D plot."
    )
    argparser.add_argument("seed_set",
                           help="set of seed terms which should be"
                           " highlighted")
    argparser.add_argument("vec_file",
                           help="file containing t-sne-projected word"
                           " embeddings")
    argparser.add_argument("ofname",
                           help="name of the output file")
    args = argparser.parse_args(a_args)
    word2pol = {}

    def read_seeds(a_toks):
        word = a_toks[0].strip()
        pol = a_toks[1].lower().strip()
        if pol in (POSITIVE, NEGATIVE):
            word2pol[word] = pol

    read_file(args.seed_set, read_seeds)

    word2vec = {}

    def read_vecs(a_toks):
        word = a_toks[0].strip()
        vec = [float(t) for t in a_toks[1:]]
        word2vec[word] = vec

    read_file(args.vec_file, read_vecs)
    vec2png(word2pol, word2vec, args.ofname)


##################################################################
# Main
if __name__ == "__main__":
    main(sys.argv[1:])
