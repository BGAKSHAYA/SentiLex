#!/usr/bin/env python2.7
# -*- coding: utf-8-unix; mode: python; -*-

##################################################################
# Imports
from __future__ import absolute_import, unicode_literals

from copy import deepcopy
import argparse
import codecs
import matplotlib.pyplot as plt
import re
import pandas as pd
import seaborn as sns
import sys

##################################################################
# Constants
COMMENT = "###"
ENCODING = "utf-8"
ETYPE = "etype"
PPLX = "perplexity"
FS = 14
TAB_RE = re.compile(r" *\t+ *")
POSITIVE = "positive"
NEGATIVE = "negative"
NEUTRAL = "neutral"
POL = "polarity"
NEUT_COL = "#6E7B8B"
NEUT_MARK = "."
POS_COL = "#8B0000"
POS_MARK = "^"
NEG_COL = "#0000CC"
NEG_MARK = "v"
POLARITIES = (NEUTRAL, NEGATIVE, POSITIVE)
MARKERS = [NEUT_MARK, NEG_MARK, POS_MARK]
POL2SIZE = {POSITIVE: 150, NEGATIVE: 150, NEUTRAL: 10}
PALETTE = {POSITIVE: POS_COL, NEGATIVE: NEG_COL, NEUTRAL: NEUT_COL}
SIZE = "size"


##################################################################
# Methods
def read_file(a_fname, a_func):
    """Read content of a file.

    @param a_fname - input file to be read
    @type a_fname - str
    @param a_func - custom function for processing each line
    @type a_func - lambda

    @return \c void

    """
    with codecs.open(a_fname, 'r', ENCODING) as ifile:
        for iline in ifile:
            iline = iline.strip().lower()
            if not iline or iline.startswith(COMMENT):
                continue
            a_func(TAB_RE.split(iline))


def vec2png(a_w2pol, a_etp2wv, a_ofname):
    """Generate a PNG plot for word embeddings.

    @param a_w2pol - mapping from word to polarity
    @param a_etp2wv - mapping from embedding type and perplexity to word
      vectors
    @param a_ofname - name of the output file in which to save the plot

    """
    # construct pandas dataframe
    data = pd.DataFrame([{ETYPE: etype, PPLX: pplx,
                          POL: a_w2pol.get(w, NEUTRAL),
                          SIZE: POL2SIZE[a_w2pol.get(w.lower(), NEUTRAL)],
                          'x': x, 'y': y}
                         for (etype, pplx), stat in a_etp2wv.iteritems()
                         for w, (x, y) in stat.iteritems()])
    data[POL] = pd.Categorical(data[POL], POLARITIES)
    data.sort_values(by=[ETYPE, PPLX, POL], inplace=True,
                     ascending=False, kind="heapsort")
    data.reset_index(drop=True, inplace=True)
    # set up common parameters
    sns.set_context("paper")
    sns.set_style("white")
    plt.tick_params(axis="both", labelsize=FS - 4)
    # create scatter plot
    g = sns.FacetGrid(data, row=PPLX, col=ETYPE,
                      hue=POL, hue_order=POLARITIES,
                      hue_kws={'s': [3, 156, 156],
                               "marker": MARKERS},
                      legend_out=True, sharex=False, sharey=False,
                      despine=True, palette=PALETTE, margin_titles=True)
    g = g.map(plt.scatter, 'x', 'y')
    g.set_titles(col_template="{col_name}", fontweight='bold',
                 size=FS - 3)
    # obtain handles and labels for the legend
    legend_data = g._legend_data
    labels = []
    handles = []
    ihandle = None
    for pol in reversed(POLARITIES):
        labels.append(pol)
        ihandle = legend_data[pol]
        handles.append(ihandle)
    # see 'http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.legend'
    legend = sns.plt.legend(handles, labels,
                            markerscale=1,
                            title="Terms",
                            fontsize=FS - 3,
                            frameon=True,
                            bbox_to_anchor=(-2.15, -0.45),
                            loc=3, ncol=len(POLARITIES))
    title = legend.get_title()
    title.set_weight("bold")
    title.set_fontsize(FS - 3)
    # resize x and y labels
    xlabel = ylabel = None
    for i, axes_row in enumerate(g.axes):
        for j, axes_col in enumerate(axes_row):
            if j == 0:
                ylabel = axes_col.get_ylabel()
                axes_col.set_ylabel(ylabel, size=FS - 3, rotation=0)
            xlabel = axes_col.get_xlabel()
            axes_col.set_xlabel(xlabel, size=FS - 3)
    # sns.plt.show()
    g.savefig(a_ofname, dpi=300, bbox_extra_artists=(legend,),
              pad_inches=0.2, bbox_inches="tight")


def main(a_args):
    """Main method for visualizing sne embeddings.

    @param a_args - CLI arguments
    @type a_args - list[str]

    """
    argparser = argparse.ArgumentParser(
        description="Represent t-sne embeddings on a 2D plot."
    )
    argparser.add_argument("ofname",
                           help="name of the output file")
    argparser.add_argument("seed_set",
                           help="set of seed terms which should be"
                           " highlighted")
    argparser.add_argument("vec_files",
                           help="file containing t-sne-projected word"
                           " embeddings (last parts of file names should"
                           " specify the embedding type and perplexity",
                           nargs='+')
    args = argparser.parse_args(a_args)
    word2pol = {}

    def read_seeds(a_toks):
        word = a_toks[0].strip()
        pol = a_toks[1].lower().strip()
        if pol in (POSITIVE, NEGATIVE):
            word2pol[word] = pol

    read_file(args.seed_set, read_seeds)

    word2vec = {}

    def read_vecs(a_toks):
        word = a_toks[0].strip()
        vec = [float(t) for t in a_toks[1:]]
        word2vec[word] = vec

    # mapping from embedding type and perplexity to word vectors
    etp2wv = {}
    fields = etype = perplexity = None
    for ifname in args.vec_files:
        fields = ifname.split('.')
        assert len(fields) > 1, \
            "The last two (dot-separated) components of the vector file" \
            " name should specify embedding type and perplexity values."
        etype, perplexity = fields[-2], float(fields[-1])
        etype = etype.replace('_', " + ")
        etype = etype.replace('least-', "least ")
        read_file(ifname, read_vecs)
        etp2wv[(etype, perplexity)] = deepcopy(word2vec)
        word2vec.clear()

    vec2png(word2pol, etp2wv, args.ofname)


##################################################################
# Main
if __name__ == "__main__":
    main(sys.argv[1:])
