#!/bin/sh

set -e

##################################################################
# Methods
usage() (
    cat <<EOF  >&2
Evaluate sentiment lexicon generation methods on different seed sets.

SYNOPSIS:
$(basename $0) [OPTIONS]

OPTIONS:
-h|--help	show this screen and exit
-c|--corpus-based	evaluate corpus-based approaches
-n|--nwe-based	evaluate NWE-based approaches

EOF
)

##################################################################
# Args
DICT_BASED=1
CORPUS_BASED=0
NWE_BASED=0

SLG_HOME=${SLG_HOME:?"Variable is not set, set it to the path to SentiLex project."}
BIN_DIR="${SLG_HOME}/build/bin"
POTTS_HOME=${POTTS_HOME:?"Variable is not set, set it to the path to PotTS project."}
ODIR="${SLG_HOME}/ssresults"
VEC_FILE="${SLG_HOME}/data/vectors/vectors.out"
VEC_FILE_SFX=''
POTTS_FORM2LEMMA="${SLG_HOME}/data/form2lemma.txt"

while test $# -gt 0; do
    case $1 in
	-h|--help)
	    usage
	    exit 0;;
	-c|--corpus-based)
	    DICT_BASED=0
	    CORPUS_BASED=1;;
	-n|--nwe-based)
	    DICT_BASED=0
	    NWE_BASED=1;;
	--)
	    shift
	    break;;
	*)
	    echo "Invalid argument $1.  Type --help to see usage." >&2
	    exit 2;;
    esac
    shift
done

##################################################################
# Variables and Constants
if test ${DICT_BASED} -eq 1; then
    SLG_METHODS='hu-liu blair-goldensohn kim-hovy esuli-sebastiani
rao-min-cut rao-lbl-prop awdallah'
    SLG_ADD_OPTS="--ext-syn-rels
 --form2lemma=${SLG_HOME}/data/GermaNet_v9.0/gn_form2lemma.txt"
elif test ${CORPUS_BASED} -eq 1; then
    TSNAPSHOT_HOME=${TSNAPSHOT_HOME:?"Variable is not set, set it to the path to Twitter snapshot."}
    SLG_METHODS='takamura kiritchenko severyn velikovich'
    SLG_ADD_OPTS=''
else
    SLG_METHODS='ncentroids knn pca linproj'
    SLG_ADD_OPTS=''
fi

ES_SEED_SET="${SLG_HOME}/data/seeds/esuli_sebastiani_gi_seedset.txt"
HL_SEED_SET="${SLG_HOME}/data/seeds/hu_liu_seedset.txt"
KH_SEED_SET="${SLG_HOME}/data/seeds/kim_hovy_2004.txt"
RR_SEED_SET="${SLG_HOME}/data/seeds/remus_seedset.txt"
EMO_SEED_SET="${SLG_HOME}/data/seeds/emoticons_seedset.txt" # not included yet
GLD_SEED_SET="${SLG_HOME}/data/seeds/gold_seedset.txt" # not included yet

SEED_SETS="\
 ${HL_SEED_SET}\
 ${KH_SEED_SET}\
 ${ES_SEED_SET}\
 ${RR_SEED_SET}\
 ${EMO_SEED_SET}\
 ${GLD_SEED_SET}\
"


##################################################################
# Main
SGL_OPTS=''
for slg in ${SLG_METHODS}; do
    for sset in ${SEED_SETS}; do
	case "${sset}" in
	    "${ES_SEED_SET}")
		if test ${DICT_BASED} -eq 1; then
		    SGL_OPTS="--seed-pos=none"
		fi
		OFNAME="${ODIR}/${slg}.ext-syn-rels.esuli-sebastiani-seedset.txt";;
	    "${KH_SEED_SET}")
		if test ${DICT_BASED} -eq 1; then
		    SGL_OPTS="--seed-pos=none"
		fi
		OFNAME="${ODIR}/${slg}.ext-syn-rels.kim-hovy-seedset.txt";;
	    "${HL_SEED_SET}")
		if test ${DICT_BASED} -eq 1; then
		    SGL_OPTS="--seed-pos=adj"
		fi
		OFNAME="${ODIR}/${slg}.ext-syn-rels.hu-liu-seedset.txt";;
	    "${RR_SEED_SET}")
		if test ${DICT_BASED} -eq 1; then
		    SGL_OPTS="--seed-pos=adj"
		fi
		OFNAME="${ODIR}/${slg}.ext-syn-rels.remus-seedset.txt";;
	    "${EMO_SEED_SET}")
		if test ${DICT_BASED} -eq 1; then
		    echo "Seed set ${EMO_SEED_SET} is not support by dictionary-based methods" >&2
		    continue
		fi
		OFNAME="${ODIR}/${slg}.emoticons-seedset.txt";;
	    "${GLD_SEED_SET}")
		if test ${DICT_BASED} -eq 1; then
		    SGL_OPTS="--seed-pos=adj"
		fi
		OFNAME="${ODIR}/${slg}.gold-seedset.txt";;
	    *)
		echo "Unknown seed set $sset." >&2;
		exit 4;;
	esac
	echo "${slg}" >&2
	echo "${sset}" >&2
	if test ${DICT_BASED} -eq 1; then
	    "${SLG_HOME}/scripts/generate_lexicon.py" ${slg} ${SLG_OPTS} \
		${SLG_ADD_OPTS} "${sset}" "${SLG_HOME}/data/GermaNet_v9.0" \
		> "${OFNAME}" 2> "${ODIR}/${slg}.$(basename ${sset%_*}).log"
	    "${SLG_HOME}/scripts/evaluate.py" -f -l "${POTTS_FORM2LEMMA}" \
		"${OFNAME}" "${POTTS_HOME}/corpus/basedata/" \
		"${POTTS_HOME}/corpus/annotator-2/markables/" \
		2> "${ODIR}/${slg}.$(basename ${sset%_*}).eval.log" | \
		awk '/^Macro-average/ {print $NF}'
	else
	    if test ${CORPUS_BASED} -eq 1; then
		if test "${slg}" = 'takamura'; then
		    "${SLG_HOME}/scripts/generate_lexicon.py" \
			"${slg}" "${sset}" "${SLG_HOME}/data/GermaNet_v9.0" \
			"${SLG_HOME}/data/corpus/cc.txt" -1 > "${OFNAME}" \
			2> "${ODIR}/${slg}.$(basename ${sset%_*}).log"
		else
		    "${SLG_HOME}/scripts/generate_lexicon.py" \
			${slg} "${sset}" -1 "${TSNAPSHOT_HOME}"/*.tagged > "${OFNAME}" \
			2> "${ODIR}/${slg}.$(basename ${sset%_*}).log"
		fi
	    else
		VEC_FILE_SFX=''
		case "${slg}" in
		    ncentroids)
			slg='-t 0';;
		    knn)
			slg='-t 1';;
		    pca)
			slg='-t 2'
			VEC_FILE_SFX='.40000';;
		    knn)
			slg='-t 3';;
		    *)
			echo "Unknown type of SLG algorithm: ${slg}" >&2
			exit 3;;
		esac
		"${SLG_HOME}/build/bin/vec2dic -L -M ${slg}" \
		    "${VEC_FILE}${VEC_FILE_SFX} ${sset}" > "${OFNAME}" \
		    2> "${ODIR}/${slg}.$(basename ${sset%_*}).log"
	    fi
	    # determine the optimal number of terms for that method
	    MAX_MAV_F1=0
	    MAX_MAV_F1_I=0
	    for i in $(seq 40 20 5120); do
		head -$i "${OFNAME}" > "${OFNAME}.$i"
		MAX_MAV_F1_I=$("${SLG_HOME}/scripts/evaluate.py" -f -l "${POTTS_FORM2LEMMA}" \
		    "${OFNAME}.$i" "${POTTS_HOME}/corpus/basedata/" \
		    "${POTTS_HOME}/corpus/annotator-2/markables/" \
		    2> "${ODIR}/${slg}.$(basename ${sset%_*}).eval.log" | \
		    awk '/^Macro-average/ {print $NF}')
		rm "${OFNAME}.$i"
		if test $(awk "BEGIN {print (${MAX_MAV_F1_I} > ${MAX_MAV_F1})}") = '1'; then
		    MAX_MAV_F1=${MAX_MAV_F1_I}
		fi
	    done
	    echo ${MAX_MAV_F1}
	fi
    done
done
